
from sympy import *
from sympy import poly
from sympy.abc import x, y, z
from sympy import LC
from sympy import LT
from sympy import subresultants

# computes de reductum of the polynomial F, as a polynomial of I_r[x]
def red(F, x):
    p = F - LT(F, x)
        return p

# computes de reducta (RED) of the polynomial F, as a polynomial of I_r[x]
def reducta(F, x):
    L = []
        aux = F
        while(aux != 0):
            L.append(aux)
                aux = red(aux, x)
    
    return L

# exemple del llibre (o l'article)
# p = poly((x**2 +y**2 - 1)*z**3 + (x-1)*z**2 + (x-1)**2 + y**2)
# p
# red(p, z)
# reducta(p, z)

# no esta gens refinat a nivell de cost
# especialment tota la part de fer dos RED, esta fatal en aquest sentit

# computes the operation PROJ (not all the projection fase)
# projection of the polynomials in A, as polynomials of I_r[x]
def PROJ(A, x):
    P = []   # this will be the output set
        # estic usant les operacions de list, pero al final es fa list(set(P)) i elimina els duplicats
        # F is a polynomial in A
        for F in A:
            R = reducta(F, x)
                
            for G in R:
                P.append( LC(G, x))
                H = diff(G, x)
                PSC = []
                
                # n = min(deg(G), deg(H))
                # for i in range(n):
                # psc_j(G,H)
                
                n = min(deg(G), deg(H))
                p = subresultants(G,H)
                for i in range(n):
                    # psc_j(G,H)
                    if(p[i] != 0)
                        c = p[i].as_expr().coeff(x**(n-i))
                        P.append(c)
        
                for I in A:
                    if(I == F):
                        break
                        else:
                            S = reducta(I, x)
                            for J in S:
                                m = min(deg(G), deg(H))
                                    q = subresultants(G,H)
                                        for i in range(m):
                                            # psc_j(G,H)
                                            if(q[i] != 0)
                                                d = q[i].as_expr().coeff(x**(m-i))
                                                P.append(d)



# de moment fem totes les possibles combinacions sense refinar. Bastaria amb associar un boole√† de usat o no a cada polinomi

return list(set(P))
